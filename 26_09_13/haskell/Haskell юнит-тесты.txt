
"ghci> " getNextVertex [(1,False),(2,False),(3,False),(4,False),(5,False)] [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)]
1

"ghci> " getOutcomingVertices [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])] 1
[2,3,4,5]

>getEdgeWeight [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), => ("5-4",30), ("4-2",40), ("4-3",20)] 5 1
10.0

>getVertexDistance [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)] 3
=>1000.0

>edgeHasWeight [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), ("5-4",30), ("4-2",40), ("4-3",20)] 20 1
=>False

> getNextDistance [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)] [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), ("5-4",30), ("4-2",40), ("4-3",20)] 1 2
=>10.0

>getNextDistances [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)] [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), ("5-4",30), ("4-2",40), ("4-3",20)] 1 [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])]
=>[(2,10.0),(3,30.0),(4,50.0),(5,10.0)]

>isChangedDistance 2 10.0 [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)]
=>True

> let xs = [(2,10.0),(3,30.0),(4,50.0),(5,10.0)]
>let ys = [(1,0.0),(2,1000.0),(3,1000.0),(4,1000.0),(5,1000.0)]
>getVerticesWithChangedDistance xs ys
=>[2,3,4,5]

>   getUpdatedParents [(1,1),(2,1),(3,1),(4,1),(5,1)] [2,3,4] 5
=> [(1,1),(2,5),(3,5),(4,5),(5,1)]

>getNextDistances [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)] [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), ("5-4",30), ("4-2",40), ("4-3",20)] 1 [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])]
=>[(1,0.0),(2,10.0),(3,30.0),(4,50.0),(5,10.0)]

>getUpdatedVisited [(1,False), (2,False), (3,False)] 2
=>[(1,False),(2,True),(3,False)]

let g = getUpdatedDistancesParents  [(1,0),(2,1000),(3,1000),(4,1000),(5,1000)] [("3-5",10), ("5-1",10), ("5-3",10), ("1-5",10), ("1-4",50), ("1-3",30), ("1-2",10), ("5-4",30), ("4-2",40), ("4-3",20)] [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])] [(1,1),(2,1),(3,1),(4,1),(5,1)] 1
"ghci> " fst g
[(1,0.0),(2,10.0),(3,30.0),(4,50.0),(5,10.0)]
"ghci> " snd g
[(1,1),(2,1),(3,1),(4,1),(5,1)]

ghci> " let z = getCalculatedParentsCosts ([(1,0.0),(2,1000.0),(3,1000.0),(4,1000.0),(5,1000.0)], [("3-5",10.0),("5-1",10.0),("5-3",10.0),("1-5",10.0),("1-4",50.0),("1-3",30.0),("1-2",10.0),("5-4",30.0),("4-2",40.0),("4-3",20.0)], [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])], [(1,False),(2,False),(3,False),(4,False),(5,False)], [(1,1),(2,1),(3,1),(4,1),(5,1)], 1)
"ghci> " z
([(1,0.0),(2,10.0),(3,20.0),(4,40.0),(5,10.0)],[("3-5",10.0),("5-1",10.0),("5-3",10.0),("1-5",10.0),("1-4",50.0),("1-3",30.0),("1-2",10.0),("5-4",30.0),("4-2",40.0),("4-3",20.0)],[(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])],[(1,True),(2,False),(3,True),(4,True),(5,True)],[(1,1),(2,1),(3,5),(4,5),(5,1)],0)
"ghci> " 

"ghci> " let parents = [(1,1),(2,1),(3,5),(4,5),(5,1)]
"ghci> " let z = getParentbyVertexNumber parents 3
"ghci> " z
5

"ghci> " let z = getPathFromSource ([(1,1),(2,1),(3,5),(4,5),(5,1)], 1, 3, [])
"ghci> " z
([(1,1),(2,1),(3,5),(4,5),(5,1)],1,1,[5,3])

"ghci> " let z = getPathInfo [(1,0.0),(2,10.0),(3,20.0),(4,40.0),(5,10.0)] [5,3] 3
"ghci> " z
"path from source to 3goes through these vertices: [5,3] and costs 20.0"

"ghci> " let d = [(1,0.0),(2,10.0),(3,20.0),(4,40.0),(5,10.0)]
"ghci> " let z = [a | (a,b) <- d, a /= 1]
"ghci> " z
[2,3,4,5]

let d = [(1,0.0),(2,1000.0),(3,1000.0),(4,1000.0),(5,1000.0)]
let w = [("3-5",10.0), ("5-1",10.0), ("5-3",10.0), ("1-5",10.0), ("1-4",50.0), ("1-3",30.0), ("1-2",10.0), ("5-4",30.0), ("4-2",40.0), ("4-3",20.0)]
let out_vs = [(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])]
let p = [(1,1),(2,1),(3,1),(4,1),(5,1)]
let v = [(1,False),(2,False),(3,False),(4,False),(5,False)]
let source = 1
let g = getCalculatedParentsCosts (d, w, out_vs, v, p, source)


"ghci> " g
([(1,0.0),(2,10.0),(3,20.0),(4,40.0),(5,10.0)],[("3-5",10.0),("5-1",10.0),("5-3",10.0),("1-5",10.0),("1-4",50.0),("1-3",30.0),("1-2",10.0),("5-4",30.0),("4-2",40.0),("4-3",20.0)],[(1,[2,3,4,5]),(2,[]),(3,[5]),(4,[2,3]),(5,[1,3,4])],[(1,True),(2,False),(3,True),(4,True),(5,True)],[(1,1),(2,1),(3,5),(4,5),(5,1)],0)

"ghci> " let parents = ffth_of_six g
"ghci> " parents
[(1,1),(2,1),(3,5),(4,5),(5,1)]

"ghci> " let costs   = fst_of_six g
"ghci> " costs
[(1,0.0),(2,10.0),(3,20.0),(4,40.0),(5,10.0)]

"ghci> " let vertices = [a | (a,b) <- d, a /= source]
"ghci> " vertices
[2,3,4,5]




